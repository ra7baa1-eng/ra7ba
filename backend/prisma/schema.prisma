// Prisma Schema for Rahba - Multi-Tenant E-commerce Platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== ENUMS ====================

enum UserRole {
  SUPER_ADMIN
  MERCHANT
  CUSTOMER
}

enum TenantStatus {
  ACTIVE
  SUSPENDED
  TRIAL
  EXPIRED
}

enum SubscriptionPlan {
  STANDARD  // 1350 DZD
  PRO       // 2500 DZD
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PENDING_PAYMENT
  EXPIRED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum DeliveryCompany {
  YALIDINE
  ZR_EXPRESS
  JET_EXPRESS
}

// ==================== MODELS ====================

// Users (Super Admin, Merchants, Customers)
model User {
  id            String      @id @default(uuid())
  email         String      @unique
  password      String
  name          String
  phone         String?
  role          UserRole    @default(CUSTOMER)
  isActive      Boolean     @default(true)
  emailVerified Boolean     @default(false)
  
  // Relations
  tenant        Tenant?     @relation("TenantOwner")
  tenantId      String?     @unique
  refreshTokens RefreshToken[]
  orders        Order[]
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@index([email])
  @@index([role])
}

// Refresh Tokens for JWT
model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([token])
}

// Tenant (Each Merchant's Store)
model Tenant {
  id          String        @id @default(uuid())
  subdomain   String        @unique
  customDomain String?      @unique
  name        String
  nameAr      String
  description String?
  // descriptionAr String? // Temporarily disabled due to migration issues
  logo        String?
  banner      String?
  theme       Json?         // Store theme customization
  checkoutConfig Json?      // Checkout required/optional fields configuration
  status      TenantStatus  @default(TRIAL)
  
  // Trial limits
  trialEndsAt DateTime?
  orderCount  Int          @default(0)
  productCount Int         @default(0)
  
  // Relations
  ownerId     String       @unique
  owner       User         @relation("TenantOwner", fields: [ownerId], references: [id])
  subscription Subscription?
  products    Product[]
  orders      Order[]
  categories  Category[]
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  @@index([subdomain])
  @@index([status])
  @@index([ownerId])
}

// Subscription & Billing
model Subscription {
  id              String              @id @default(uuid())
  tenantId        String              @unique
  tenant          Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  plan            SubscriptionPlan    @default(STANDARD)
  status          SubscriptionStatus  @default(TRIAL)
  
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  
  // Payment tracking
  payments        Payment[]
  
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@index([tenantId])
  @@index([status])
}

// Payment Records (BaridiMob)
model Payment {
  id              String         @id @default(uuid())
  subscriptionId  String
  subscription    Subscription   @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  amount          Decimal        @db.Decimal(10, 2)
  currency        String         @default("DZD")
  
  // BaridiMob details
  baridimobRef    String?
  paymentProof    String?        // Uploaded receipt/screenshot
  
  status          PaymentStatus  @default(PENDING)
  approvedBy      String?        // Admin ID who approved
  approvedAt      DateTime?
  rejectionReason String?
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  @@index([subscriptionId])
  @@index([status])
}

// Categories
model Category {
  id          String    @id @default(uuid())
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  name        String
  nameAr      String
  slug        String
  description String?
  image       String?
  
  products    Product[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([tenantId, slug])
  @@index([tenantId])
}

// Products
model Product {
  id          String    @id @default(uuid())
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  name        String
  nameAr      String
  slug        String
  description String?
  descriptionAr String?
  
  price       Decimal   @db.Decimal(10, 2)
  comparePrice Decimal? @db.Decimal(10, 2)
  cost        Decimal?  @db.Decimal(10, 2)
  
  sku         String?
  barcode     String?
  
  // Inventory
  trackInventory Boolean @default(false)
  stock       Int       @default(0)
  
  // Images
  images      Json      @default("[]")
  thumbnail   String?
  
  // Status
  isActive    Boolean   @default(true)
  isFeatured  Boolean   @default(false)
  
  // SEO
  metaTitle   String?
  metaDescription String?
  
  orderItems  OrderItem[]
  // Variants relations
  options     ProductOption[]
  variants    ProductVariant[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([tenantId, slug])
  @@index([tenantId])
  @@index([categoryId])
  @@index([isActive])
}

// Orders
model Order {
  id          String       @id @default(uuid())
  tenantId    String
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Customer info
  customerId  String?
  customer    User?        @relation(fields: [customerId], references: [id], onDelete: SetNull)
  
  customerName String
  customerEmail String?
  customerPhone String
  
  // Order details
  orderNumber String       @unique
  status      OrderStatus  @default(PENDING)
  
  subtotal    Decimal      @db.Decimal(10, 2)
  shippingCost Decimal     @db.Decimal(10, 2)  // Using shippingCost to match current DB
  total       Decimal      @db.Decimal(10, 2)
  
  // Delivery info
  wilaya      String
  commune     String?
  address     String
  postalCode  String?
  
  deliveryCompany DeliveryCompany?
  trackingNumber  String?
  
  // Notes
  customerNotes String?
  merchantNotes String?
  
  // Timestamps
  confirmedAt  DateTime?
  shippedAt    DateTime?
  deliveredAt  DateTime?
  cancelledAt  DateTime?
  
  items       OrderItem[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([tenantId])
  @@index([customerId])
  @@index([status])
  @@index([orderNumber])
}

// Order Items
model OrderItem {
  id          String   @id @default(uuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Restrict)
  
  productName String
  productNameAr String
  productImage String?
  
  quantity    Int
  price       Decimal  @db.Decimal(10, 2)
  subtotal    Decimal  @db.Decimal(10, 2)
  
  createdAt   DateTime @default(now())
  
  @@index([orderId])
  @@index([productId])
}

// Algerian Wilayas (58 provinces)
model Wilaya {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  nameAr      String
  deliveryFee Decimal  @db.Decimal(10, 2) @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([code])
}

// Platform Settings
model Setting {
  id          String   @id @default(uuid())
  key         String   @unique
  value       Json
  description String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([key])
}

// ==================== PRODUCT VARIANTS ====================

// Option group for a product (e.g., Size, Color, Capacity)
model ProductOption {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  name      String              // e.g., Size
  position  Int      @default(0)
  values    ProductOptionValue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

// A single value for an option (e.g., S, M, L)
model ProductOptionValue {
  id         String        @id @default(uuid())
  optionId   String
  option     ProductOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  value      String
  position   Int           @default(0)

  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@index([optionId])
}

// A concrete purchasable variant (combination of option values)
model ProductVariant {
  id         String   @id @default(uuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  sku        String?
  barcode    String?

  // Variant-specific pricing and inventory (fallbacks to product price/stock if null)
  price      Decimal? @db.Decimal(10, 2)
  stock      Int?
  isActive   Boolean  @default(true)

  // Store selected options as simple JSON map { Size: "M", Color: "Red" }
  options    Json

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([productId])
  @@index([isActive])
}

// ==================== QUANTITY BUNDLE OFFERS ====================

model BundleOffer {
  id          String   @id @default(uuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  minQuantity Int
  bundlePrice Decimal  @db.Decimal(10, 2)
  isActive    Boolean  @default(true)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
  @@index([isActive])
}

// ==================== PLAN FEATURE FLAGS ====================

model PlanFeatureFlags {
  id                           String            @id @default(uuid())
  plan                         SubscriptionPlan  @unique
  variantsEnabled              Boolean           @default(false)
  quantityDiscountsEnabled     Boolean           @default(false)
  checkoutCustomizationEnabled Boolean           @default(false)

  createdAt                    DateTime          @default(now())
  updatedAt                    DateTime          @updatedAt
}

// Notification Log (Admin alerts)
model Notification {
  id          String   @id @default(uuid())
  type        String
  title       String
  message     String
  data        Json?
  isRead      Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  
  @@index([isRead])
  @@index([createdAt])
}
